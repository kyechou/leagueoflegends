#!/bin/bash

set -euo pipefail

msg() {
    echo -e "[+] ${1-}" >&2
}

warn() {
    echo -e "[!] ${1-}" >&2
}

die() {
    echo -e "[!] ${1-}" >&2
    exit 1
}

version_le() {
    lesser_version="$(echo -e "$1\n$2" | sort -V | head -n1)"
    [ "$1" = "$lesser_version" ]
}

join_array() {
    local IFS="$1"
    shift
    echo "$*"
}

askQ() {
    count=1
    echo
    echo "    $1"
    shift
    for region in "$@"; do
        echo "    #$count - $region"
        ((count++))
    done
    echo
}

parse_args() {
    VERBOSE=0
    PATCHLINE=live
    LOCALE=

    while :; do
        case "${1-}" in
        -h | --help) usage; exit ;;
        -v | --verbose)
            VERBOSE=1; set -x ;;
        --pbe)
            PATCHLINE=pbe ;;
        --locale)
            LOCALE="${2-}"
            shift
            ;;
        --) shift; break ;;
        -?*) die "Unknown option: ${1-}\n$(usage)" ;;
        *) break ;;
        esac
        shift
    done

    CMD=("$@")
    export VERBOSE
    export PATCHLINE
    export LOCALE
    export CMD
}

read_configs() {
    if [ -n "${XDG_CONFIG_HOME+x}" ]; then
        CONFIG_FILE="$XDG_CONFIG_HOME/league.sh"
    else
        CONFIG_FILE="$HOME/.config/league.sh"
    fi

    if [ -f "$CONFIG_FILE" ]; then
        # shellcheck source=/dev/null
        source "$CONFIG_FILE"
    fi

    if [ -z "${DATA_HOME+x}" ]; then
        if [ -n "${XDG_DATA_HOME+x}" ]; then
            DATA_HOME="$XDG_DATA_HOME"
        else
            DATA_HOME="$HOME/.local/share"
        fi
    fi

    if [ -z "${CACHE_HOME+x}" ]; then
        if [ -n "${XDG_CACHE_HOME+x}" ]; then
            CACHE_HOME="$XDG_CACHE_HOME"
        else
            CACHE_HOME="$HOME/.cache"
        fi
    fi

    export DATA_HOME
    export CACHE_HOME
}

export_env_variables() {
    # Note that in this order, wine-lol-staging will take precedence over
    # wine-lol if they both exist. Consider adding a configuration option in the
    # future.

    if [[ -d "/opt/wine-lol/bin" ]]; then
        PATH="/opt/wine-lol/bin:$PATH"
    fi

    if [[ -d "/opt/wine-lol-staging/bin" ]]; then
        PATH="/opt/wine-lol-staging/bin:$PATH"
    fi

    export PATH
    export REGFILE="/usr/share/doc/leagueoflegends/leagueoflegends.reg"
    export ICON="/usr/share/icons/hicolor/256x256/apps/leagueoflegends.png"
    export CACHE_DIR="$CACHE_HOME/leagueoflegends"

    export WINEARCH="${WINEARCH:-win64}"
    export WINEDLLOVERRIDES="mscoree,mshtml=;winemenubuilder.exe=d"
    export WINE_REQ_MOD=(vcrun2019 win10)
    export WINEPREFIX="${WINEPREFIX:-$DATA_HOME/leagueoflegends}"
    export INSTALL_DIR="$WINEPREFIX/drive_c/Riot Games"
    export RIOT_CLIENT="$INSTALL_DIR/Riot Client/RiotClientServices.exe"
    export LEAGUE_CLIENT="$INSTALL_DIR/League of Legends/LeagueClient.exe"
    export GAME_EXE_DIR="$INSTALL_DIR/League of Legends/Game"
    export GAME_EXE="$GAME_EXE_DIR/League of Legends.exe"
    export RUNES_FILE="$INSTALL_DIR/League of Legends/Config/PerksPreferences.yaml"

    if [ "$VERBOSE" -ne 0 ]; then
        export WINEDEBUG="${WINEDEBUG:-}"
        export VK_LOADER_DEBUG="${VK_LOADER_DEBUG:-error,warn,driver}"
    else
        export WINEDEBUG="${WINEDEBUG:-fixme-all}"
    fi

    export DXVK_DLLS=(d3d9 d3d10core d3d11 dxgi)
    export DXVK_LOG_LEVEL=none
    export DXVK_STATE_CACHE=0
    DXVKDLLOVERRIDES="$(join_array , "${DXVK_DLLS[@]}")=n,b"
    WINEDLLOVERRIDES="${WINEDLLOVERRIDES};${DXVKDLLOVERRIDES}"

    export MESA_GLTHREAD=true
    export STAGING_SHARED_MEMORY=1
    export WINE_LARGE_ADDRESS_AWARE=1
    export __GL_SHADER_DISK_CACHE=1
    export __GL_SHADER_DISK_CACHE_PATH="$WINEPREFIX"
    export __GL_THREADED_OPTIMIZATIONS=1
}

check_depends() {
    depends=(wine wineboot winetricks winecfg wineserver winepath curl glxinfo)
    for dep in "${depends[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            die "Missing $dep"
        fi
    done

    optdepends=()
    for dep in "${optdepends[@]}"; do
        if command -v "$dep" >/dev/null 2>&1; then
            export "HAS_$(echo "$dep" | awk '{ print toupper($0) }')"=1
        fi
    done
}

check_vulkan() {
    if [ -z "${VK_DRIVER_FILES+x}" ]; then
        # VK_DRIVER_FILES has not been set
        # Get the active graphic card vendor
        VENDOR_STRING="$(glxinfo -B | grep 'OpenGL vendor string' | cut -d: -f2)"
        if echo "$VENDOR_STRING" | grep -iqF amd; then
            VK_DRIVER_FILES="$(echo /usr/share/vulkan/icd.d/{radeon,amd}* | sed 's/ /:/g')"
        elif echo "$VENDOR_STRING" | grep -iqF nvidia; then
            VK_DRIVER_FILES="$(echo /usr/share/vulkan/icd.d/nvidia* | sed 's/ /:/g')"
        elif echo "$VENDOR_STRING" | grep -iqF intel; then
            VK_DRIVER_FILES="$(echo /usr/share/vulkan/icd.d/intel* | sed 's/ /:/g')"
        fi
    fi

    export VK_DRIVER_FILES
}

check_wine_lol() {
    wine_path="$(command -v wine)"

    if [[ "$wine_path" != *"wine-lol"* ]]; then
        die "$wine_path doesn't seem to be wine-lol or wine-lol-staging"
    fi
}

_create_wineprefix() {
    if [ -e "$WINEPREFIX" ]; then
        die "Wineprefix $WINEPREFIX already exists"
    fi

    msg "Creating wineprefix: $WINEPREFIX"
    mkdir -p "$WINEPREFIX"
    wineboot --init
    msg "Installing winetricks verbs: ${WINE_REQ_MOD[*]}"
    winetricks -q --optout --force "${WINE_REQ_MOD[@]}"
    for link in "$WINEPREFIX/dosdevices"/*; do
        [[ "$link" =~ 'c:' ]] && continue # for drive_c
        [[ "$link" =~ 'z:' ]] && continue # for /
        msg "Removing unnecessary device $(basename "$link")"
        unlink "$link"
    done
    msg "Modifying WINE registry with $REGFILE"
    regedit "$REGFILE"
    msg "Waiting for wine processes..."
    wineserver --wait
    add_dxvk
    msg "Wineprefix created: $WINEPREFIX"
}

install_LoL() {
    if [ ! -e "$WINEPREFIX" ]; then
        _create_wineprefix
    elif [ -f "$RIOT_CLIENT" ]; then
        while :; do
            echo -n "[!] The game has been installed. Install anyway? [Y/n] "
            read -r force
            force="$(echo "$force" | tr '[:upper:]' '[:lower:]')"
            if [ -z "${force##y*}" ]; then
                break
            elif [ -z "${force##n*}" ]; then
                exit 1
            fi
        done
    fi

    askQ "Select your region" \
        "North America" "EU West" "EU Nordic & East" "Latin America North" \
        "Latin America South" "Brazil" "Turkey" "Russia" "Japan" "Oceania" \
        "Republic of Korea" "Taiwan" "Philippines" "Singapore" "Vietnam" \
        "Thailand"

    read -r -p "    #: " answer

    case "${answer}" in
        1) # North America
            export LANG_CODE="na" ;;
        2) # EU West
            export LANG_CODE="euw" ;;
        3) # EU Nordic & East
            export LANG_CODE="eune" ;;
        4) # Latin America North
            export LANG_CODE="la1" ;;
        5) # Latin America South
            export LANG_CODE="la2" ;;
        6) # Brazil
            export LANG_CODE="br" ;;
        7) # Turkey
            export LANG_CODE="tr" ;;
        8) # Russia
            export LANG_CODE="ru" ;;
        9) # Japan
            export LANG_CODE="jp" ;;
        10) # Oceania
            export LANG_CODE="oc1" ;;
        11) # Republic of Korea
            export LANG_CODE="kr" ;;
        12) # Taiwan
            export LANG_CODE="tw2" ;;
        13) # Philippines
            export LANG_CODE="ph2" ;;
        14) # Singapore
            export LANG_CODE="sg2" ;;
        15) # Vietnam
            export LANG_CODE="vn2" ;;
        16) # Thailand
            export LANG_CODE="th2" ;;
        *)
            die "Unknown region number: $answer" ;;
    esac

    INSTALLER="$CACHE_DIR/installer.$LANG_CODE.exe"
    INSTALLER_URL="https://lol.secure.dyn.riotcdn.net/channels/public/x/installer/current/live.$LANG_CODE.exe"

    if [ ! -e "$INSTALLER" ]; then
        msg "Downloading installer..."
        mkdir -p "$CACHE_DIR"
        curl --silent --show-error -Lo "$INSTALLER" "$INSTALLER_URL"
    fi
    msg "Installing League of Legends..."
    wine "$(winepath -w "$INSTALLER")"
    msg "Waiting for wine processes..."
    wineserver --wait
    msg "The game is installed at $INSTALL_DIR"
}

uninstall_LoL() {
    msg "Uninstalling league of legends..."
    set +e
    rm -rf "$CACHE_DIR" "$WINEPREFIX"

    # clean up menu entries
    rm -rf \
        ~/.config/menus/applications-merged/*-League\ of\ Legends* \
        ~/.local/share/applications/wine/Programs/Riot\ Games \
        ~/.local/share/desktop-directories/*-League\ of\ Legends.directory \
        ~/.local/share/desktop-directories/*-Riot\ Games.directory
    find -H ~/.config/menus/applications-merged -empty -delete
    find -H ~/.config/menus -empty -delete
    find -H ~/.local/share/applications/wine/Programs -empty -delete
    find -H ~/.local/share/applications/wine -empty -delete
    find -H ~/.local/share/applications -empty -delete
    find -H ~/.local/share/desktop-directories -empty -delete
    set -e
}

reset_wineprefix() {
    if [ ! -e "$WINEPREFIX" ]; then
        die "Wine prefix $WINEPREFIX does not exist. No need to reset"
    fi

    local saved_game_dir
    saved_game_dir="$(realpath "$WINEPREFIX"/../league_save_dir)"

    if [ -e "$saved_game_dir" ]; then
        die "$saved_game_dir already exists"
    fi

    if [ -e "$INSTALL_DIR" ]; then
        msg "Saving $INSTALL_DIR to $saved_game_dir"
        mv "$INSTALL_DIR" "$saved_game_dir"
    fi

    uninstall_LoL
    _create_wineprefix

    if [ -e "$saved_game_dir" ]; then
        msg "Moving $saved_game_dir back to $INSTALL_DIR"
        mv "$saved_game_dir" "$INSTALL_DIR"
    fi
}

_save_runes() {
    # Temporary workaround to prevent the rune pages getting overwritten when
    # the League client launches
    # (https://github.com/kyechou/leagueoflegends/issues/38)
    if [ -f "$RUNES_FILE" ]; then
        chmod a-w "$RUNES_FILE"
    fi
}

start_LoL() {
    if [ ! -f "$RIOT_CLIENT" ]; then
        while :; do
            echo -n "[!] The game is not installed. Install it? [Y/n] "
            read -r install
            install="$(echo "$install" | tr '[:upper:]' '[:lower:]')"
            if [ -z "${install##y*}" ]; then
                install_LoL
                break
            elif [ -z "${install##n*}" ]; then
                exit 1
            fi
        done
    fi

    msg "Starting..."
    _save_runes

    if [ -n "$LOCALE" ]; then
        wine "$(winepath -w "$LEAGUE_CLIENT")" \
            --locale="$LOCALE"
    else
        wine "$(winepath -w "$RIOT_CLIENT")" \
            --launch-product=league_of_legends \
            --launch-patchline="$PATCHLINE"
    fi

    wineserver --wait
    wait
}

replay_match()  {
    if [ ! -f "$GAME_EXE" ]; then
        die "The game is not installed. Please install it first"
    fi

    if [ ! -f "$1" ]; then
        die "File not found: $1"
    fi

    msg "Replaying $1"
    replay_path="$(winepath -w "$1")"
    (cd "$GAME_EXE_DIR" && wine "$(winepath -w "$GAME_EXE")" "$replay_path")
    wineserver --wait
    wait
}

_download_dxvk() {
    DXVK_VERSION="$(curl -s https://api.github.com/repos/doitsujin/dxvk/releases/latest | grep 'tag_name' | cut -d\" -f4 | tr -d v)"
    DXVK_URL="https://github.com/doitsujin/dxvk/releases/download/v$DXVK_VERSION/dxvk-$DXVK_VERSION.tar.gz"
    DXVK_TARBALL="$CACHE_DIR/dxvk-$DXVK_VERSION.tar.gz"

    if [ ! -f "$DXVK_TARBALL" ]; then
        msg "Downloading DXVK tarball"
        mkdir -p "$CACHE_DIR"
        curl --silent --show-error -Lo "$DXVK_TARBALL" "$DXVK_URL"
    fi
    msg "Extracting DXVK tarball..."
    tar xzf "$DXVK_TARBALL" -C "$CACHE_DIR"
}

add_dxvk() {
    if [ ! -d "$WINEPREFIX" ]; then
        die "The game is not installed. Please install it first"
    fi

    _download_dxvk
    msg "Installing DXVK to $WINEPREFIX"

    # Install 64-bit libraries
    for dll in "${DXVK_DLLS[@]}"; do
        local src_file="$CACHE_DIR/dxvk-$DXVK_VERSION/x64/$dll.dll"
        local dst_file="$WINEPREFIX/drive_c/windows/system32/$dll.dll"

        if [ ! -f "$src_file" ]; then
            die "File not found: $src_file"
        fi

        if [ -f "$dst_file" ] && [ ! -f "$dst_file.old" ]; then
            mv -v "$dst_file" "$dst_file.old"
        fi

        cp -v --reflink=auto "$src_file" "$dst_file"
    done

    # Install 32-bit libraries
    for dll in "${DXVK_DLLS[@]}"; do
        local src_file="$CACHE_DIR/dxvk-$DXVK_VERSION/x32/$dll.dll"
        local dst_file="$WINEPREFIX/drive_c/windows/syswow64/$dll.dll"

        if [ ! -f "$src_file" ]; then
            die "File not found: $src_file"
        fi

        if [ -f "$dst_file" ] && [ ! -f "$dst_file.old" ]; then
            mv -v "$dst_file" "$dst_file.old"
        fi

        cp -v --reflink=auto "$src_file" "$dst_file"
    done

    msg "DXVK is installed"
}

del_dxvk() {
    if [ ! -d "$WINEPREFIX" ]; then
        die "The game is not installed. Please install it first"
    fi

    _download_dxvk
    msg "Uninstalling DXVK from $WINEPREFIX"

    # Remove 64-bit libraries
    for dll in "${DXVK_DLLS[@]}"; do
        local src_file="$CACHE_DIR/dxvk-$DXVK_VERSION/x64/$dll.dll"
        local dst_file="$WINEPREFIX/drive_c/windows/system32/$dll.dll"

        if [ ! -f "$src_file" ]; then
            die "File not found: $src_file"
        fi

        if [ -f "$dst_file.old" ]; then
            mv -v "$dst_file.old" "$dst_file"
        fi
    done

    # Remove 32-bit libraries
    for dll in "${DXVK_DLLS[@]}"; do
        local src_file="$CACHE_DIR/dxvk-$DXVK_VERSION/x32/$dll.dll"
        local dst_file="$WINEPREFIX/drive_c/windows/syswow64/$dll.dll"

        if [ ! -f "$src_file" ]; then
            die "File not found: $src_file"
        fi

        if [ -f "$dst_file.old" ]; then
            mv -v "$dst_file.old" "$dst_file"
        fi
    done

    msg "DXVK is removed"
}

rm_dxvk_cache() {
    if [ -d "$CACHE_DIR" ]; then
        find "$CACHE_DIR" -type f -name '*.dxvk-cache' -exec rm {} +
    fi
}

cleanup_logs() {
    msg "Cleaning up log files..."
    if [ -d "$INSTALL_DIR" ]; then
        find -H "$INSTALL_DIR" -name "*.log" -delete -print
        if [ -d "$INSTALL_DIR/League of Legends/Logs" ]; then
            find -H "$INSTALL_DIR/League of Legends/Logs" -type f -delete -print
            find -H "$INSTALL_DIR/League of Legends/Logs" -empty -delete -print
        fi
    fi
}

usage() {
    cat <<EOF
[!] Usage: $(basename "${BASH_SOURCE[0]}") [options] <command>

    League of Legends - helper program

    Options:
        -h, --help          Print this message and exit
        -v, --verbose       Enable verbose output
        --pbe               Launch the PBE patchline
        --locale <locale>   Set locale (if different from the region)

    Commands:
        start               Start LoL
        install             Install LoL
        uninstall           Uninstall LoL
        reinstall           Reinstall LoL
        reset-wineprefix    Reset wine prefix
        replay <path>       Replay match (.rofl file)
        add-dxvk            Install DXVK to the LoL wineprefix
        del-dxvk            Remove DXVK from the LoL wineprefix
        rm-dxvk-cache       Remove DXVK cache
        cleanup-logs        Remove log files
        kill,stop           Kill the wine processes of the wineprefix
        run <cmd>           Run shell command with environment variables
EOF
}

_32_to_64_transition_guard() {
    local SYSTEM32="$WINEPREFIX/drive_c/windows/system32"
    local SYSWOW64="$WINEPREFIX/drive_c/windows/syswow64"

    if [[ -e "$SYSTEM32" ]] && [[ ! -e "$SYSWOW64" ]]; then
        cat <<EOF
[!] The current installation is 32-bit.
    Please run 'leagueoflegends reinstall' to switch to a 64-bit installation.
EOF
        exit
    fi
}

run_command() {
    case "${1-}" in
        start) _32_to_64_transition_guard && start_LoL ;;
        install) _32_to_64_transition_guard && install_LoL ;;
        uninstall) uninstall_LoL ;;
        reinstall) uninstall_LoL && _32_to_64_transition_guard && install_LoL ;;
        reset-wineprefix) reset_wineprefix ;;
        replay) shift; _32_to_64_transition_guard && replay_match "${1-}" ;;
        add-dxvk) _32_to_64_transition_guard && add_dxvk ;;
        del-dxvk) _32_to_64_transition_guard && del_dxvk ;;
        rm-dxvk-cache) rm_dxvk_cache ;;
        cleanup-logs) cleanup_logs ;;
        kill) wineserver --kill ;;
        stop) wineserver --kill ;;
        run) shift; _32_to_64_transition_guard && "$@" ;;
        *) die "Unknown command: ${1-}\n$(usage)" ;;
    esac
}

main() {
    parse_args "$@"
    read_configs
    export_env_variables
    check_depends
    check_vulkan
    check_wine_lol
    run_command "${CMD[@]}"
}


main "$@"

# vim: set ts=4 sw=4 et:
